import React, { ReactNode } from 'react';
import { IAutoComplete } from '../../AutoComplete';
import { DateRangePickerSelecting } from '../../DateRangePicker';
import { PassengerPickerRules, PassengerPickerValues } from '../../PassengerPicker';
interface IPassagemContextProps {
    adults: number;
    childs: number;
    infants: number;
    start: any;
    end: any;
    endLimit: Date;
    startLimit: Date;
    startError: string;
    endError: string;
    origem: IAutoComplete.Value | null;
    origemError: string;
    origemInput: string;
    destino: IAutoComplete.Value | null;
    destinoError: string;
    destinoInput: string;
    calendarOpen: boolean;
    travelType: TravelType;
    origemOptions: IAutoComplete.CategoryOptions[];
    destinoOptions: IAutoComplete.CategoryOptions[];
    PassengersTotal: number;
    PassengersLimit: number;
    CalendarRef: any;
    passengerPickerValues: PassengerPickerValues;
    disableIncrement: PassengerPickerRules;
    disableDecrement: PassengerPickerRules;
    selecting: DateRangePickerSelecting | undefined;
    datePickerModalText: string;
    frameTitle: string;
    setSelecting: (selecting: DateRangePickerSelecting | undefined) => void;
    setStart: (start: any) => void;
    setEnd: (end: any) => void;
    setStartError: (error: string) => void;
    setEndError: (error: string) => void;
    setAdults: (val: number) => void;
    setChilds: (val: number) => void;
    setCalendarOpen: (val: boolean) => void;
    setInfants: (val: number) => void;
    setOrigem: (val: IAutoComplete.Value | null) => void;
    setOrigemError: (error: string) => void;
    setOrigemInput: (val: string) => void;
    setDestino: (val: IAutoComplete.Value | null) => void;
    setDestinoError: (error: string) => void;
    setDestinoInput: (val: string) => void;
    setTravelType: (type: TravelType) => void;
    setOrigemOptions: (options: IAutoComplete.CategoryOptions[]) => void;
    setDestinoOptions: (options: IAutoComplete.CategoryOptions[]) => void;
    FormatInputDate: (d: Date | null) => string;
    RedirectUrl: () => void;
    RequestSuggestions: (value: string, setOptions: (options: any) => void) => void;
}
declare type PassagemProviderProps = {
    children: ReactNode;
    url: string;
    persistUrlParams?: boolean;
    frameTitle: string;
};
declare type TravelType = 'IDAVOLTA' | 'IDA' | 'MULTI';
export declare const PassagemContext: React.Context<IPassagemContextProps>;
export declare const UsePassagem: () => IPassagemContextProps;
export declare function PassagemProvider({ children, url, persistUrlParams, frameTitle }: PassagemProviderProps): JSX.Element;
export {};
